local Matrix = require("Matrix")

local TestCases = {
	-- {matrix, inverse}
	{
		Matrix.id(6),
		Matrix.id(6),
	},
	{
		Matrix.new({ { 1, -1 }, { 3, 6 } }),
		Matrix.new({ { 2 / 3, 1 / 9 }, { -1 / 3, 1 / 9 } }),
	},
	{
		Matrix.new({ { 2, 1, 1 }, { 4, 1, 0 }, { -2, 2, 1 } }),
		Matrix.new({ { 0.125, 0.125, -0.125 }, { -0.5, 0.5, 0.5 }, { 1.25, -0.75, -0.25 } }),
	},
	{
		Matrix.new({ { 2, -1, 0, 0 }, { -1, 2, -1, 0 }, { 0, -1, 2, -1 }, { 0, 0, -1, 2 } }),
		Matrix.new({ { 0.8, 0.6, 0.4, 0.2 }, { 0.6, 1.2, 0.8, 0.4 }, { 0.4, 0.8, 1.2, 0.6 }, { 0.2, 0.4, 0.6, 0.8 } }),
	},
	{
		Matrix.new({
			{ 3.5107, -8.89147, 3.61708, 4.11185, -2.66695 },
			{ 7.43312, 7.86211, 7.7262, -3.39287, -3.0052 },
			{ 1.62239, -0.123454, 9.14657, -9.7346, -5.92447 },
			{ -0.411015, 6.30865, -9.81425, 9.08249, -9.7718 },
			{ 0.292459, 0.00167841, 0.887809, -0.948112, 6.78176 },
		}),
		Matrix.new({
			{ 0.626089, -0.571103, 1.61469, 1.62475, 3.74481 },
			{ -0.246649, 0.258487, -0.561892, -0.521924, -1.22535 },
			{ -0.52013, 0.636444, -1.55028, -1.55564, -3.51834 },
			{ -0.374425, 0.493323, -1.25737, -1.1664, -2.70773 },
			{ -0.0111936, 0.0102149, -0.042328, -0.0293531, 0.068307 },
		}),
	},
	{
		Matrix.new({ { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 0 } }),
		nil,
	},
	{
		Matrix.new({ { 1, -2 }, { -3, 6 } }),
		nil,
	},
	{
		Matrix.new({ { 1, 3, 1, 2 }, { 5, 8, 5, 3 }, { 0, 4, 0, 0 }, { 2, 3, 2, 8 } }),
		nil,
	},
	{
		Matrix.new({
			{ 6.46966, 3.52818, 0.863428, 3.65923, 7.06105 },
			{ 6.31434, -1.97815, -0.806005, -0.725179, -1.02295 },
			{ -5.67316, -5.00583, -4.43587, 1.22875, 6.94048 },
			{ -9.01991, -9.06407, 3.70864, 9.84658, -3.03231 },
			{ -1.90907, -12.51987, -0.669807, 14.009381, 9.94627 },
		}),
		nil,
	},
}

for _, testCase in TestCases do
	local matrix = testCase[1]
	local expectedInverse = testCase[2]
	local actualInverse = matrix:Inverse()

	print(matrix)
	print("Expected:")
	print(expectedInverse)
	print("Actual:")
	print(actualInverse)
	if expectedInverse == nil then
		print("PASS: ", expectedInverse == actualInverse)
	else
		print("PASS: ", (expectedInverse - actualInverse):FrobeniusNorm() < 1e-4)
	end
	print()
end
